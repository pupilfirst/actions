name: Check Repository Structure
description: Check whether the file structure of a supplied repository is correct
inputs:
  globs:
    description: Comma-separated globs to check.
    required: true
  repoPath:
    description: Path to the repository.
    required: false
    default: ""
  testMode:
    description: Set to true for debugging
    required: false
    default: false
outputs:
  isValid:
    description: Whether the repository structure is valid or not
    value: ${{ steps.verify-structure.outputs.isValid }}
runs:
  using: composite
  steps:
    - name: Check out the parent repository with student submission data
      uses: actions/checkout@v2
    - name: Extract the student submission repo from URL
      uses: actions/github-script@v5
      id: get-repo-url
      continue-on-error: true
      with:
        script: |
          const submission = require('./submission.json')
          const gitURL =  submission.checklist[0].result
          const regex = /(?:git@|https:\/\/)github.com[:\/]([a-zA-Z0-9\-_.]+\/[a-zA-Z0-9\-_.\/]+)$/g
          const repoUrl = regex.exec(gitURL)[1].replace(/.git$|\/$/, "")

          if (repoUrl.split("/").length == 2) {
            return repoUrl
          } else {
            throw "The submitted URL seems to be of a folder inside a repository"
          }
        result-encoding: string
    - name: Report invalid repository URL in submission
      if: steps.get-repo-url.outcome != 'success' && !inputs.testMode
      uses: pupilfirst/actions/grading@v1
      with:
        fail_submission: true
        feedback: |
          We're sorry, but we couldn't read a valid GitHub URL in your
          submission. When making another submission, please ensure that you
          submit a GitHub URL that looks like this:

          ```
          https://github.com/USERNAME/wd201
          ```
    - name: Stop if we failed to get the repo URL
      if: steps.get-repo-url.outcome != 'success'
      run: exit 1
      shell: bash
    - name: Check out the repository with submitted code
      uses: actions/checkout@v2
      continue-on-error: true
      id: checkout-repo
      with:
        repository: ${{ steps.get-repo-url.outputs.result }}
        path: ${{ inputs.repoPath }}
    - name: Report invalid repository URL in submission
      if: steps.checkout-repo.outcome != 'success' && !inputs.testMode
      uses: pupilfirst/actions/grading@v1
      with:
        fail_submission: true
        feedback: |
          We're sorry, but we couldn't visit the GitHub URL that you supplied.
          The URL _looked_ like it could be valid, but when we were unable to
          clone a git repository using it. This usually happens if the supplied
          URL is incorrect, or the repository is _private_.

          Before making another submission, please ensure that the submitted
          repository is visible to the public.
    - name: Stop if we failed to clone the repo
      if: steps.checkout-repo.outcome != 'success'
      run: exit 1
      shell: bash
    - name: Verify structure of the repo
      id: verify-structure
      uses: actions/github-script@v6
      with:
        script: |
          const patterns = core.getMultilineInput("globs", { required: true });
          const repoPath = core.getInput("repoPath");

          const globbers = patterns.map(pattern => {
            const prefixedPattern = repoPath === "" ? pattern : repoPath + "/" + pattern
            return await glob.create(prefixedPattern)
          })

          const missingPaths = globbers.flatMap(globber => {
            const files = await globber.glob()

            if (files.length === 0) {
              return globber.getSearchPaths()
            } else {
              return []
            }
          })

          return({
            isValid: missingPaths.length === 0
            missingPaths: missingPaths.map(path => "- " + path).join("\n")
          })
    - name: Report invalid repository URL in submission
      if: ${{ !steps.verify-structure.outputs.isValid && !inputs.testMode }}
      uses: pupilfirst/actions/grading@v1
      with:
        fail_submission: true
        feedback: |
          It looks like your repository doesn't contain the files or folders
          that this assignment requires it to have. We went through your repo,
          but couldn't find anything at the following paths:

          ${{ steps.verify-structure.missingPaths }}
    - name: Stop with error code if the repo structure was invalid
      if: ${{ !steps.verify-structure.outputs.isValid }}
      run: exit 1
      shell: bash
