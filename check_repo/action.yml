name: Check Repository Structure
description: Check whether the file structure of a supplied repository is correct
inputs:
  globs:
    description: Globs to check, one per line.
    required: true
  repoPath:
    description: Path to the repository.
    required: false
    default: ""
  testMode:
    description: Set to true for debugging
    required: false
    default: "false"
outputs:
  result:
    description: Returns 'success' if all checks pass.
    value: ${{ steps.verify-structure.outputs.result }}
runs:
  using: composite
  steps:
    - name: Check testMode
      run: echo "testMode is now ${{ inputs.testMode }}"
      shell: bash
    - name: Check out the parent repository with student submission data
      uses: actions/checkout@v2
    - name: Extract the student submission repo from URL
      uses: actions/github-script@v6
      id: get-repo-name
      continue-on-error: true
      with:
        script: |
          const submission = require('./submission.json');
          const gitURL =  submission.checklist[0].result;
          const regex = /(?:git@|https:\/\/)github.com[:\/]([a-zA-Z0-9\-_.]+\/[a-zA-Z0-9\-_.\/]+)$/g;
          const matches = regex.exec(gitURL);

          let repoName;

          if (matches === null) {
            console.log("The submitted URL doesn't look like it points to a GitHub repo: " + gitURL);
            return "failure"
          } else {
            repoName = matches[1].replace(/.git$|\/$/, "");
          }

          if (repoName.split("/").length == 2) {
            return repoName
          } else {
            console.log("The submitted URL seems to be of a folder inside a repository");
            return "failure"
          }
        result-encoding: string
    - name: Report invalid repository URL in submission
      if: ${{ steps.get-repo-name.outputs.result == 'failure' && inputs.testMode == 'false' }}
      uses: pupilfirst/actions/grading@v1
      with:
        fail_submission: true
        feedback: |
          We're sorry, but we couldn't read a valid GitHub URL in your
          submission. When making another submission, please ensure that you
          submit a GitHub URL that looks like this:

          ```
          https://github.com/USERNAME/wd201
          ```
    - name: Check out the repository with submitted code
      if: ${{ steps.get-repo-name.outputs.result != 'failure' }}
      uses: actions/checkout@v2
      continue-on-error: true
      id: checkout-repo
      with:
        repository: ${{ steps.get-repo-name.outputs.result }}
        path: ${{ inputs.repoPath }}
    - name: Report invalid repository URL in submission
      if: ${{ steps.get-repo-name.outputs.result != 'failure' && steps.checkout-repo.outcome != 'success' && inputs.testMode == 'false' }}
      uses: pupilfirst/actions/grading@v1
      with:
        fail_submission: true
        feedback: |
          We're sorry, but we were unable to clone a git repository using the
          URL that you supplied in your submission. For the record, this was
          the URL we tried to clone a repository from:

          ```
          https://github.com/${{ steps.get-repo-name.outputs.result }}
          ```

          This usually happens if the supplied URL is incorrect, or the
          repository is private.

          Before making another submission, please ensure that the submitted
          repository is visible to the public.
    - name: Verify structure of the repo
      if: steps.checkout-repo.outcome == 'success'
      id: verify-structure
      uses: actions/github-script@v6
      with:
        globs: ${{ inputs.globs }}
        repoPath: ${{ inputs.repoPath }}
        script: |
          const patterns = core.getMultilineInput("globs", { required: true });
          const repoPath = core.getInput("repoPath");

          const globbers = await Promise.all(patterns.map(async (pattern) => {
            const prefixedPattern = repoPath === "" ? pattern : repoPath + "/" + pattern;
            return await glob.create(prefixedPattern);
          }));

          const allMissingFiles = await Promise.all(globbers.flatMap(async (globber) => {
            return await globber.glob();
          }));

          let missingSomeFiles = false;

          allMissingFiles.forEach(files => {
            if (files.length === 0) {
              missingSomeFiles = true;
            }
          });

          if (missingSomeFiles) {
            return "failure";
          } else {
            return "success"
          }
    - name: Report invalid repository URL in submission
      if: ${{ steps.verify-structure.outputs.result == 'failure' && inputs.testMode == 'false' }}
      uses: pupilfirst/actions/grading@v1
      with:
        globs: ${{ inputs.globs }}
        fail_submission: true
        feedback: |
          It looks like your repository doesn't contain the files or folders
          that this assignment requires it to have. Please make sure that the
          following paths are present in your repo:

          ```
          ${{ inputs.globs }}
          ```
